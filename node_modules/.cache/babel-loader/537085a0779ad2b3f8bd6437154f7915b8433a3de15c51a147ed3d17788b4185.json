{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbamallee/3dmodel-store/src/ModelList.jsx\",\n  _s = $RefreshSig$();\n// ModelList.jsx\nimport React, { useEffect, useState } from 'react';\nimport sanityClient from './sanityClient'; // Ensure this path is correct\nimport ModelPopup from './ModelPopup'; // Adjust this import if necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModelList() {\n  _s();\n  const [models, setModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n  useEffect(() => {\n    // Fetch models from Sanity\n    sanityClient.fetch('*[_type == \"model\"]') // Query to fetch all items of type \"model\"\n    .then(data => setModels(data)).catch(error => console.error(\"Error fetching models:\", error));\n  }, []);\n  if (models.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No models found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this); // Display message if no models are found\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model-list\",\n    children: [models.map(model => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => setSelectedModel(model),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: model.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), \" \"]\n    }, model._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)), selectedModel && /*#__PURE__*/_jsxDEV(ModelPopup, {\n      isOpen: true,\n      onClose: () => setSelectedModel(null),\n      modelTitle: selectedModel.title,\n      modelUrl: selectedModel.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelList, \"c0+kvFlTCbDkVSW/gxoREhOYDy8=\");\n_c = ModelList;\nvar _c;\n$RefreshReg$(_c, \"ModelList\");","map":{"version":3,"names":["React","useEffect","useState","sanityClient","ModelPopup","jsxDEV","_jsxDEV","ModelList","_s","models","setModels","selectedModel","setSelectedModel","fetch","then","data","catch","error","console","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","model","onClick","title","_id","isOpen","onClose","modelTitle","modelUrl","url","_c","$RefreshReg$"],"sources":["/Users/ahmadbamallee/3dmodel-store/src/ModelList.jsx"],"sourcesContent":["// ModelList.jsx\nimport React, { useEffect, useState } from 'react';\nimport sanityClient from './sanityClient'; // Ensure this path is correct\nimport ModelPopup from './ModelPopup'; // Adjust this import if necessary\n\nexport default function ModelList() {\n  const [models, setModels] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(null);\n\n  useEffect(() => {\n    // Fetch models from Sanity\n    sanityClient\n      .fetch('*[_type == \"model\"]') // Query to fetch all items of type \"model\"\n      .then((data) => setModels(data))\n      .catch((error) => console.error(\"Error fetching models:\", error));\n  }, []);\n\n  if (models.length === 0) {\n    return <p>No models found.</p>; // Display message if no models are found\n  }\n\n  return (\n    <div className=\"model-list\">\n      {models.map((model) => (\n        <div key={model._id} onClick={() => setSelectedModel(model)}>\n          <h3>{model.title}</h3> {/* Make sure each model has a title */}\n          {/* Optionally add a preview image or other details here */}\n        </div>\n      ))}\n      {selectedModel && (\n        <ModelPopup\n          isOpen={true}\n          onClose={() => setSelectedModel(null)}\n          modelTitle={selectedModel.title}\n          modelUrl={selectedModel.url}\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAC3C,OAAOC,UAAU,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd;IACAE,YAAY,CACTU,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAAA,CAC7BC,IAAI,CAAEC,IAAI,IAAKL,SAAS,CAACK,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIR,MAAM,CAACU,MAAM,KAAK,CAAC,EAAE;IACvB,oBAAOb,OAAA;MAAAc,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC,CAAC;EAClC;EAEA,oBACElB,OAAA;IAAKmB,SAAS,EAAC,YAAY;IAAAL,QAAA,GACxBX,MAAM,CAACiB,GAAG,CAAEC,KAAK,iBAChBrB,OAAA;MAAqBsB,OAAO,EAAEA,CAAA,KAAMhB,gBAAgB,CAACe,KAAK,CAAE;MAAAP,QAAA,gBAC1Dd,OAAA;QAAAc,QAAA,EAAKO,KAAK,CAACE;MAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,KAAC;IAAA,GADfG,KAAK,CAACG,GAAG;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGd,CACN,CAAC,EACDb,aAAa,iBACZL,OAAA,CAACF,UAAU;MACT2B,MAAM,EAAE,IAAK;MACbC,OAAO,EAAEA,CAAA,KAAMpB,gBAAgB,CAAC,IAAI,CAAE;MACtCqB,UAAU,EAAEtB,aAAa,CAACkB,KAAM;MAChCK,QAAQ,EAAEvB,aAAa,CAACwB;IAAI;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAlCuBD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}