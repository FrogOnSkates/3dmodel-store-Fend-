{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.SanityImageUrlBuilder = factory());\n})(this, function () {\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n  function parseAssetId(ref) {\n    var _ref$split = ref.split('-'),\n      id = _ref$split[1],\n      dimensionString = _ref$split[2],\n      format = _ref$split[3];\n    if (!id || !dimensionString || !format) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n    var _dimensionString$spli = dimensionString.split('x'),\n      imgWidthStr = _dimensionString$spli[0],\n      imgHeightStr = _dimensionString$spli[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n    if (!isValidAssetId) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n    return {\n      id: id,\n      width: width,\n      height: height,\n      format: format\n    };\n  }\n  var isRef = function isRef(src) {\n    var source = src;\n    return source ? typeof source._ref === 'string' : false;\n  };\n  var isAsset = function isAsset(src) {\n    var source = src;\n    return source ? typeof source._id === 'string' : false;\n  };\n  var isAssetStub = function isAssetStub(src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === 'string' : false;\n  };\n  // Convert an asset-id, asset or image to an image record suitable for processing\n  // eslint-disable-next-line complexity\n  function parseSource(source) {\n    if (!source) {\n      return null;\n    }\n    var image;\n    if (typeof source === 'string' && isUrl(source)) {\n      // Someone passed an existing image url?\n      image = {\n        asset: {\n          _ref: urlToId(source)\n        }\n      };\n    } else if (typeof source === 'string') {\n      // Just an asset id\n      image = {\n        asset: {\n          _ref: source\n        }\n      };\n    } else if (isRef(source)) {\n      // We just got passed an asset directly\n      image = {\n        asset: source\n      };\n    } else if (isAsset(source)) {\n      // If we were passed an image asset document\n      image = {\n        asset: {\n          _ref: source._id || ''\n        }\n      };\n    } else if (isAssetStub(source)) {\n      // If we were passed a partial asset (`url`, but no `_id`)\n      image = {\n        asset: {\n          _ref: urlToId(source.asset.url)\n        }\n      };\n    } else if (typeof source.asset === 'object') {\n      // Probably an actual image with materialized asset\n      image = _extends({}, source);\n    } else {\n      // We got something that does not look like an image, or it is an image\n      // that currently isn't sporting an asset.\n      return null;\n    }\n    var img = source;\n    if (img.crop) {\n      image.crop = img.crop;\n    }\n    if (img.hotspot) {\n      image.hotspot = img.hotspot;\n    }\n    return applyDefaults(image);\n  }\n  function isUrl(url) {\n    return /^https?:\\/\\//.test(\"\" + url);\n  }\n  function urlToId(url) {\n    var parts = url.split('/').slice(-1);\n    return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n  }\n  // Mock crop and hotspot if image lacks it\n  function applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n      return image;\n    }\n    // We need to pad in default values for crop or hotspot\n    var result = _extends({}, image);\n    if (!result.crop) {\n      result.crop = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n    }\n    if (!result.hotspot) {\n      result.hotspot = {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      };\n    }\n    return result;\n  }\n  var SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop'], ['saturation', 'sat'], ['auto', 'auto'], ['dpr', 'dpr'], ['pad', 'pad'], ['frame', 'frame']];\n  function urlForImage(options) {\n    var spec = _extends({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = parseSource(source);\n    if (!image) {\n      throw new Error(\"Unable to resolve image URL from source (\" + JSON.stringify(source) + \")\");\n    }\n    var id = image.asset._ref || image.asset._id || '';\n    var asset = parseAssetId(id);\n    // Compute crop rect in terms of pixel coordinates in the raw source image\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n      left: cropLeft,\n      top: cropTop,\n      width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n      height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    };\n    // Compute hot spot rect in terms of pixel coordinates\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n      left: hotSpotCenterX - hotSpotHorizontalRadius,\n      top: hotSpotCenterY - hotSpotVerticalRadius,\n      right: hotSpotCenterX + hotSpotHorizontalRadius,\n      bottom: hotSpotCenterY + hotSpotVerticalRadius\n    };\n    // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n      spec = _extends({}, spec, fit({\n        crop: crop,\n        hotspot: hotspot\n      }, spec));\n    }\n    return specToImageUrl(_extends({}, spec, {\n      asset: asset\n    }));\n  }\n  // eslint-disable-next-line complexity\n  function specToImageUrl(spec) {\n    var cdnUrl = (spec.baseUrl || 'https://cdn.sanity.io').replace(/\\/+$/, '');\n    var vanityStub = spec.vanityName ? \"/\" + spec.vanityName : '';\n    var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format + vanityStub;\n    var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n    var params = [];\n    if (spec.rect) {\n      // Only bother url with a crop if it actually crops anything\n      var _spec$rect = spec.rect,\n        left = _spec$rect.left,\n        top = _spec$rect.top,\n        width = _spec$rect.width,\n        height = _spec$rect.height;\n      var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n      if (isEffectiveCrop) {\n        params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n      }\n    }\n    if (spec.bg) {\n      params.push(\"bg=\" + spec.bg);\n    }\n    if (spec.focalPoint) {\n      params.push(\"fp-x=\" + spec.focalPoint.x);\n      params.push(\"fp-y=\" + spec.focalPoint.y);\n    }\n    var flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('');\n    if (flip) {\n      params.push(\"flip=\" + flip);\n    }\n    // Map from spec name to url param name, and allow using the actual param name as an alternative\n    SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n      var specName = mapping[0],\n        param = mapping[1];\n      if (typeof spec[specName] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n      } else if (typeof spec[param] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[param]));\n      }\n    });\n    if (params.length === 0) {\n      return baseUrl;\n    }\n    return baseUrl + \"?\" + params.join('&');\n  }\n  function fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height;\n    // If we are not constraining the aspect ratio, we'll just use the whole crop\n    if (!(imgWidth && imgHeight)) {\n      return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: source.crop\n      };\n    }\n    var crop = source.crop;\n    var hotspot = source.hotspot;\n    // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n    if (cropAspectRatio > desiredAspectRatio) {\n      // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n      var height = Math.round(crop.height);\n      var width = Math.round(height * desiredAspectRatio);\n      var top = Math.max(0, Math.round(crop.top));\n      // Center output horizontally over hotspot\n      var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n      var left = Math.max(0, Math.round(hotspotXCenter - width / 2));\n      // Keep output within crop\n      if (left < crop.left) {\n        left = crop.left;\n      } else if (left + width > crop.left + crop.width) {\n        left = crop.left + crop.width - width;\n      }\n      cropRect = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n    } else {\n      // The crop is taller than the desired ratio, we are cutting from top and bottom\n      var _width = crop.width;\n      var _height = Math.round(_width / desiredAspectRatio);\n      var _left = Math.max(0, Math.round(crop.left));\n      // Center output vertically over hotspot\n      var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n      var _top = Math.max(0, Math.round(hotspotYCenter - _height / 2));\n      // Keep output rect within crop\n      if (_top < crop.top) {\n        _top = crop.top;\n      } else if (_top + _height > crop.top + crop.height) {\n        _top = crop.top + crop.height - _height;\n      }\n      cropRect = {\n        left: _left,\n        top: _top,\n        width: _width,\n        height: _height\n      };\n    }\n    return {\n      width: imgWidth,\n      height: imgHeight,\n      rect: cropRect\n    };\n  }\n  var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\n  var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n  var validAutoModes = ['format'];\n  function isSanityModernClientLike(client) {\n    return client && 'config' in client ? typeof client.config === 'function' : false;\n  }\n  function isSanityClientLike(client) {\n    return client && 'clientConfig' in client ? typeof client.clientConfig === 'object' : false;\n  }\n  function rewriteSpecName(key) {\n    var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n    for (var _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done;) {\n      var entry = _step.value;\n      var specName = entry[0],\n        param = entry[1];\n      if (key === specName || key === param) {\n        return specName;\n      }\n    }\n    return key;\n  }\n  function urlBuilder(options) {\n    // Did we get a modernish client?\n    if (isSanityModernClientLike(options)) {\n      // Inherit config from client\n      var _options$config = options.config(),\n        apiUrl = _options$config.apiHost,\n        projectId = _options$config.projectId,\n        dataset = _options$config.dataset;\n      var apiHost = apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: projectId,\n        dataset: dataset\n      });\n    }\n    // Did we get a SanityClient?\n    if (isSanityClientLike(options)) {\n      // Inherit config from client\n      var _options$clientConfig = options.clientConfig,\n        _apiUrl = _options$clientConfig.apiHost,\n        _projectId = _options$clientConfig.projectId,\n        _dataset = _options$clientConfig.dataset;\n      var _apiHost = _apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: _apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: _projectId,\n        dataset: _dataset\n      });\n    }\n    // Or just accept the options as given\n    return new ImageUrlBuilder(null, options || {});\n  }\n  var ImageUrlBuilder = /*#__PURE__*/function () {\n    function ImageUrlBuilder(parent, options) {\n      this.options = void 0;\n      this.options = parent ? _extends({}, parent.options || {}, options || {}) // Merge parent options\n      : _extends({}, options || {}); // Copy options\n    }\n    var _proto = ImageUrlBuilder.prototype;\n    _proto.withOptions = function withOptions(options) {\n      var baseUrl = options.baseUrl || this.options.baseUrl;\n      var newOptions = {\n        baseUrl: baseUrl\n      };\n      for (var key in options) {\n        if (options.hasOwnProperty(key)) {\n          var specKey = rewriteSpecName(key);\n          newOptions[specKey] = options[key];\n        }\n      }\n      return new ImageUrlBuilder(this, _extends({\n        baseUrl: baseUrl\n      }, newOptions));\n    }\n    // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n    // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n    // studio, the 'image'-document must be provided.\n    ;\n    _proto.image = function image(source) {\n      return this.withOptions({\n        source: source\n      });\n    }\n    // Specify the dataset\n    ;\n    _proto.dataset = function dataset(_dataset2) {\n      return this.withOptions({\n        dataset: _dataset2\n      });\n    }\n    // Specify the projectId\n    ;\n    _proto.projectId = function projectId(_projectId2) {\n      return this.withOptions({\n        projectId: _projectId2\n      });\n    }\n    // Specify background color\n    ;\n    _proto.bg = function bg(_bg) {\n      return this.withOptions({\n        bg: _bg\n      });\n    }\n    // Set DPR scaling factor\n    ;\n    _proto.dpr = function dpr(_dpr) {\n      // A DPR of 1 is the default - so only include it if we have a different value\n      return this.withOptions(_dpr && _dpr !== 1 ? {\n        dpr: _dpr\n      } : {});\n    }\n    // Specify the width of the image in pixels\n    ;\n    _proto.width = function width(_width) {\n      return this.withOptions({\n        width: _width\n      });\n    }\n    // Specify the height of the image in pixels\n    ;\n    _proto.height = function height(_height) {\n      return this.withOptions({\n        height: _height\n      });\n    }\n    // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n    ;\n    _proto.focalPoint = function focalPoint(x, y) {\n      return this.withOptions({\n        focalPoint: {\n          x: x,\n          y: y\n        }\n      });\n    };\n    _proto.maxWidth = function maxWidth(_maxWidth) {\n      return this.withOptions({\n        maxWidth: _maxWidth\n      });\n    };\n    _proto.minWidth = function minWidth(_minWidth) {\n      return this.withOptions({\n        minWidth: _minWidth\n      });\n    };\n    _proto.maxHeight = function maxHeight(_maxHeight) {\n      return this.withOptions({\n        maxHeight: _maxHeight\n      });\n    };\n    _proto.minHeight = function minHeight(_minHeight) {\n      return this.withOptions({\n        minHeight: _minHeight\n      });\n    }\n    // Specify width and height in pixels\n    ;\n    _proto.size = function size(width, height) {\n      return this.withOptions({\n        width: width,\n        height: height\n      });\n    }\n    // Specify blur between 0 and 100\n    ;\n    _proto.blur = function blur(_blur) {\n      return this.withOptions({\n        blur: _blur\n      });\n    };\n    _proto.sharpen = function sharpen(_sharpen) {\n      return this.withOptions({\n        sharpen: _sharpen\n      });\n    }\n    // Specify the desired rectangle of the image\n    ;\n    _proto.rect = function rect(left, top, width, height) {\n      return this.withOptions({\n        rect: {\n          left: left,\n          top: top,\n          width: width,\n          height: height\n        }\n      });\n    }\n    // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n    ;\n    _proto.format = function format(_format) {\n      return this.withOptions({\n        format: _format\n      });\n    };\n    _proto.invert = function invert(_invert) {\n      return this.withOptions({\n        invert: _invert\n      });\n    }\n    // Rotation in degrees 0, 90, 180, 270\n    ;\n    _proto.orientation = function orientation(_orientation) {\n      return this.withOptions({\n        orientation: _orientation\n      });\n    }\n    // Compression quality 0-100\n    ;\n    _proto.quality = function quality(_quality) {\n      return this.withOptions({\n        quality: _quality\n      });\n    }\n    // Make it a download link. Parameter is default filename.\n    ;\n    _proto.forceDownload = function forceDownload(download) {\n      return this.withOptions({\n        download: download\n      });\n    }\n    // Flip image horizontally\n    ;\n    _proto.flipHorizontal = function flipHorizontal() {\n      return this.withOptions({\n        flipHorizontal: true\n      });\n    }\n    // Flip image vertically\n    ;\n    _proto.flipVertical = function flipVertical() {\n      return this.withOptions({\n        flipVertical: true\n      });\n    }\n    // Ignore crop/hotspot from image record, even when present\n    ;\n    _proto.ignoreImageParams = function ignoreImageParams() {\n      return this.withOptions({\n        ignoreImageParams: true\n      });\n    };\n    _proto.fit = function fit(value) {\n      if (validFits.indexOf(value) === -1) {\n        throw new Error(\"Invalid fit mode \\\"\" + value + \"\\\"\");\n      }\n      return this.withOptions({\n        fit: value\n      });\n    };\n    _proto.crop = function crop(value) {\n      if (validCrops.indexOf(value) === -1) {\n        throw new Error(\"Invalid crop mode \\\"\" + value + \"\\\"\");\n      }\n      return this.withOptions({\n        crop: value\n      });\n    }\n    // Saturation\n    ;\n    _proto.saturation = function saturation(_saturation) {\n      return this.withOptions({\n        saturation: _saturation\n      });\n    };\n    _proto.auto = function auto(value) {\n      if (validAutoModes.indexOf(value) === -1) {\n        throw new Error(\"Invalid auto mode \\\"\" + value + \"\\\"\");\n      }\n      return this.withOptions({\n        auto: value\n      });\n    }\n    // Specify the number of pixels to pad the image\n    ;\n    _proto.pad = function pad(_pad) {\n      return this.withOptions({\n        pad: _pad\n      });\n    }\n    // Vanity URL for more SEO friendly URLs\n    ;\n    _proto.vanityName = function vanityName(value) {\n      return this.withOptions({\n        vanityName: value\n      });\n    };\n    _proto.frame = function frame(_frame) {\n      if (_frame !== 1) {\n        throw new Error(\"Invalid frame value \\\"\" + _frame + \"\\\"\");\n      }\n      return this.withOptions({\n        frame: _frame\n      });\n    }\n    // Gets the url based on the submitted parameters\n    ;\n    _proto.url = function url() {\n      return urlForImage(this.options);\n    }\n    // Alias for url()\n    ;\n    _proto.toString = function toString() {\n      return this.url();\n    };\n    return ImageUrlBuilder;\n  }();\n  return urlBuilder;\n});\n//# sourceMappingURL=image-url.umd.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}